package sort;

import java.util.Arrays;

public class MergeSort {
    /**
     * 归并排序 简介:将两个（或两个以上）有序表合并成一个新的有序表
     * 即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列 时间复杂度为O(nlogn) 稳定排序方式
     * 
     * @param nums 待排序数组
     * @return 输出有序数组
     */
    public static int[] sort(int[] nums, int low, int high, String comment) {
        int mid = (low + high) / 2;
        // System.out.println(String.format("Left: low=%s, high=%d, mid=%d",
        // low, high, mid));
        if (low < high) {
            // 左边
            sort(nums, low, mid, "left");
            // 右边
            sort(nums, mid + 1, high, "right");
            // 左右归并
            merge(nums, low, mid, high, comment);
        }
        return nums;
    }

    public static void merge(int[] nums, int low, int mid, int high, String comment) {
        System.out.println(String.format("%s: low=%s, high=%d, mid=%d", comment, low, high, mid));
        System.out.println(Arrays.toString(nums));
        int[] temp = new int[high - low + 1];
        int i = low;// 左指针
        int j = mid + 1;// 右指针
        int k = 0;

        // 把较小的数先移到新数组中
        while (i <= mid && j <= high) {
            if (nums[i] < nums[j]) {
                temp[k++] = nums[i++];
            } else {
                temp[k++] = nums[j++];
            }
        }

        // 把左边剩余的数移入数组
        while (i <= mid) {
            temp[k++] = nums[i++];
        }

        // 把右边边剩余的数移入数组
        while (j <= high) {
            temp[k++] = nums[j++];
        }

        // 把新数组中的数覆盖nums数组
        for (int k2 = 0; k2 < temp.length; k2++) {
            nums[k2 + low] = temp[k2];
        }
        System.out.println(Arrays.toString(nums));
        System.out.println();
    }

    // 归并排序的实现
    public static void main(String[] args) {

        int[] nums = { 2, 7, 8, 3, 1, 6, 9, 0, 5, 4 };

        MergeSort.sort(nums, 0, nums.length - 1, "Main");
        System.out.println(Arrays.toString(nums));
    }
}